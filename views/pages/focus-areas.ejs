<div class="focus-areas-container">
  <!-- Loading state -->
  <div id="loading-state" class="hidden flex items-center justify-content-center" style="height: 200px;">
    <div class="spinner"></div>
  </div>

  <!-- Focus Areas content -->
  <div id="focus-areas-content">
    <!-- Header -->
    <div class="focus-areas-header">
      <div class="header-left">
        <div class="page-title-group">
          <h1 class="page-title">
            <i class="fi fi-rr-target page-title-icon"></i>
            Focus Areas
          </h1>
          <p class="page-subtitle">Plan your year by assigning focus areas and goals to each month</p>
        </div>
      </div>
      <div class="header-right">
        <div class="year-selector">
          <select id="year-select" class="form-select">
            <option value="2025">2025</option>
            <option value="2026">2026</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Focus Areas Tabs -->
    <div class="goals-tabs">
      <button class="goal-tab active" data-type="calendar">Calendar</button>
      <button class="goal-tab" data-type="focus-areas">Focus Areas</button>
    </div>

    <!-- Calendar Tab Content -->
    <div id="calendar-content" class="tab-content">
      <!-- Summary Stats -->
      <div class="focus-summary-cards">
        <div class="summary-card">
          <div class="summary-icon">
            <i class="fi fi-rr-crosshairs"></i>
          </div>
          <div class="summary-content">
            <div class="summary-title">Focus Areas</div>
            <div class="summary-value" id="total-focus-areas">0</div>
          </div>
        </div>
        
        <div class="summary-card">
          <div class="summary-icon">
            <i class="fi fi-rr-star"></i>
          </div>
          <div class="summary-content">
            <div class="summary-title">Assigned Months</div>
            <div class="summary-value" id="assigned-months">0</div>
          </div>
        </div>
        
        <div class="summary-card">
          <div class="summary-icon">
            <i class="fi fi-rr-check-circle"></i>
          </div>
          <div class="summary-content">
            <div class="summary-title">Goals Assigned</div>
            <div class="summary-value" id="goals-assigned">0</div>
          </div>
        </div>
        
        <div class="summary-card">
          <div class="summary-icon">
            <i class="fi fi-rr-trending-up"></i>
          </div>
          <div class="summary-content">
            <div class="summary-title">Avg Progress</div>
            <div class="summary-value" id="avg-progress">0%</div>
          </div>
        </div>
      </div>

      <!-- Monthly Focus Areas Grid -->
      <div class="monthly-grid" id="monthly-grid">
        <!-- Monthly focus area cards will be populated here -->
      </div>
    </div>

    <!-- Focus Areas Tab Content -->
    <div id="focus-areas-content-tab" class="tab-content hidden">
      <div class="focus-areas-header">
        <div>
          <h2 class="text-2xl font-bold text-foreground mb-2">Manage Focus Areas</h2>
          <p class="text-lg text-muted-foreground">Add, edit, or remove your focus areas</p>
        </div>
        <button class="btn btn-primary" id="add-focus-area-btn">
          <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 0.5rem;">
            <path d="M5 12h14M12 5v14"/>
          </svg>
          Add Focus Area
        </button>
      </div>

      <!-- Focus Areas List -->
      <div id="focus-areas-list" class="focus-areas-list">
        <!-- Focus areas will be loaded here -->
      </div>

      <!-- No Focus Areas Message -->
      <div id="no-focus-areas" class="text-center py-12 hidden">
        <svg class="w-16 h-16 text-muted-foreground/40 mx-auto mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"/>
          <circle cx="12" cy="12" r="6"/>
          <circle cx="12" cy="12" r="2"/>
        </svg>
        <p class="text-muted-foreground mb-4">No focus areas found.</p>
        <button class="btn btn-primary" id="create-first-focus-area">
          <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 0.5rem;">
            <path d="M5 12h14M12 5v14"/>
          </svg>
          Create Your First Focus Area
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// Global state for focus areas page
let focusAreasData = [];
let monthlyAssignments = {};
let monthlyGoals = {};
let currentYear = 2025;

// Month names
const monthNames = [
  'January', 'February', 'March', 'April', 'May', 'June',
  'July', 'August', 'September', 'October', 'November', 'December'
];

// Initialize focus areas page when DOM loads
document.addEventListener('DOMContentLoaded', function() {
  console.log('Focus Areas: DOM loaded');
  console.log('Focus Areas: APP_CONFIG:', window.APP_CONFIG);
  console.log('Focus Areas: Current pathname:', window.location.pathname);
  
  // Always initialize if we're on the focus areas page
  if (window.location.pathname.includes('focus-areas')) {
    console.log('Focus Areas: Initializing...');
    initializeFocusAreasPage();
  } else {
    console.log('Focus Areas: Not on focus-areas page, skipping initialization');
  }
});

// Also try to initialize after a short delay in case APP_CONFIG isn't ready
setTimeout(() => {
  if (window.location.pathname.includes('focus-areas') && !focusAreasData.length) {
    console.log('Focus Areas: Delayed initialization attempt...');
    initializeFocusAreasPage();
  }
}, 500);

// Emergency fallback - populate with static data for testing
setTimeout(() => {
  if (window.location.pathname.includes('focus-areas')) {
    const grid = document.getElementById('monthly-grid');
    if (grid && (!grid.innerHTML || grid.innerHTML.trim() === '<!-- Monthly focus area cards will be populated here -->')) {
      console.log('Focus Areas: Using static data fallback...');
      
      // Set some static test data
      focusAreasData = [
        {id: 1, name: 'Health & Fitness'},
        {id: 2, name: 'Career & Wealth'},
        {id: 3, name: 'Personal Development'}
      ];
      monthlyAssignments = {};
      monthlyGoals = {};
      currentYear = 2025;
      
      renderMonthlyGrid();
      updateSummaryStats();
    }
  }
}, 2000);

async function initializeFocusAreasPage() {
  console.log('Initializing focus areas page...');
  try {
    // Set current year
    const currentDate = new Date();
    currentYear = currentDate.getFullYear();
    const yearSelect = document.getElementById('year-select');
    if (yearSelect) {
      yearSelect.value = currentYear;
      yearSelect.addEventListener('change', handleYearChange);
    }

    // Setup tab functionality
    setupFocusAreasTabs();

    // Load data
    await loadFocusAreasData();
    console.log('Focus areas page initialized successfully');
  } catch (error) {
    console.error('Error initializing focus areas page:', error);
    if (window.Utils && Utils.showNotification) {
      Utils.showNotification('Error loading focus areas page', 'error');
    }
  }
}

// Tab management functions
function setupFocusAreasTabs() {
  const tabButtons = document.querySelectorAll('.goal-tab');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', function() {
      const tabType = this.dataset.type;
      switchFocusAreasTab(tabType);
    });
  });

  // Setup focus areas management buttons
  const addFocusAreaBtn = document.getElementById('add-focus-area-btn');
  const createFirstFocusAreaBtn = document.getElementById('create-first-focus-area');
  
  if (addFocusAreaBtn) {
    addFocusAreaBtn.addEventListener('click', () => showFocusAreaForm());
  }
  
  if (createFirstFocusAreaBtn) {
    createFirstFocusAreaBtn.addEventListener('click', () => showFocusAreaForm());
  }
}

function switchFocusAreasTab(type) {
  // Update tab buttons
  document.querySelectorAll('.goal-tab').forEach(tab => {
    tab.classList.toggle('active', tab.dataset.type === type);
  });

  // Update tab content
  document.getElementById('calendar-content').classList.toggle('hidden', type !== 'calendar');
  document.getElementById('focus-areas-content-tab').classList.toggle('hidden', type !== 'focus-areas');

  // Load content for the active tab
  if (type === 'focus-areas') {
    renderFocusAreasList();
  }
}

async function loadFocusAreasData() {
  try {
    console.log('Focus Areas: Starting data load...');
    console.log('Focus Areas: API object available:', !!window.API);
    console.log('Focus Areas: APP_CONFIG:', window.APP_CONFIG);
    
    // Load focus areas
    console.log('Focus Areas: Loading focus areas...');
    focusAreasData = await API.get('/focus-areas');
    console.log('Focus Areas: Loaded focus areas:', focusAreasData.length, 'items');
    
    // Create a mapping from focus area name to the clean IDs
    const focusAreaNameToId = {};
    focusAreasData.forEach(area => {
      focusAreaNameToId[area.name] = area.id;
    });
    console.log('Focus Areas: Created name-to-ID mapping:', focusAreaNameToId);
    
    // Load monthly focus assignments for current year
    console.log('Focus Areas: Loading monthly assignments for year:', currentYear);
    const assignments = await API.get(`/monthly-focus?year=${currentYear}`);
    console.log('Focus Areas: Loaded assignments:', assignments.length, 'items');
    
    monthlyAssignments = {};
    assignments.forEach(assignment => {
      // Map assignment to clean focus area ID based on name
      const cleanFocusAreaId = focusAreaNameToId[assignment.focus_area_name];
      if (cleanFocusAreaId) {
        monthlyAssignments[assignment.month] = {
          focus_area_id: cleanFocusAreaId,
          focus_area_name: assignment.focus_area_name
        };
      } else {
        console.warn('Focus Areas: Could not map assignment to clean ID:', assignment);
      }
    });
    console.log('Focus Areas: Processed monthly assignments:', monthlyAssignments);

    // Load goals for current year
    console.log('Focus Areas: Loading monthly goals for year:', currentYear);
    const goals = await API.get(`/goals?type=monthly&target_year=${currentYear}`);
    console.log('Focus Areas: Loaded goals:', goals.length, 'items');
    
    monthlyGoals = {};
    
    // Group goals by month and filter by focus area
    goals.forEach(goal => {
      if (!monthlyGoals[goal.target_month]) {
        monthlyGoals[goal.target_month] = [];
      }
      monthlyGoals[goal.target_month].push(goal);
    });
    console.log('Focus Areas: Processed monthly goals:', monthlyGoals);

    console.log('Focus Areas: Rendering monthly grid...');
    renderMonthlyGrid();
    console.log('Focus Areas: Updating summary stats...');
    updateSummaryStats();
    console.log('Focus Areas: Data load complete!');
  } catch (error) {
    console.error('Focus Areas: Error loading data:', error);
    if (window.Utils && Utils.showNotification) {
      Utils.showNotification('Error loading focus areas data', 'error');
    }
  }
}

function renderMonthlyGrid() {
  console.log('renderMonthlyGrid called');
  const grid = document.getElementById('monthly-grid');
  if (!grid) {
    console.error('monthly-grid element not found!');
    return;
  }
  console.log('monthly-grid element found, rendering...');

  const currentDate = new Date();
  const currentMonth = currentDate.getMonth() + 1; // JavaScript months are 0-indexed
  const currentYear = currentDate.getFullYear();

  grid.innerHTML = monthNames.map((monthName, index) => {
    const monthNumber = index + 1;
    const isPastMonth = (currentYear === parseInt(document.getElementById('year-select').value)) && monthNumber < currentMonth;
    const assignment = monthlyAssignments[monthNumber];
    const goals = monthlyGoals[monthNumber] || [];
    const completedGoals = goals.filter(goal => goal.progress >= 100).length;
    const totalGoals = goals.length;
    const progressPercentage = totalGoals > 0 ? Math.round((completedGoals / totalGoals) * 100) : 0;

    return `
      <div class="monthly-card ${isPastMonth ? 'past-month' : ''}" data-month="${monthNumber}">
        <div class="monthly-header">
          <h3 class="monthly-title">${monthName} ${document.getElementById('year-select').value}</h3>
          <div class="monthly-progress">
            <span class="progress-percentage">${progressPercentage}%</span>
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${progressPercentage}%"></div>
            </div>
            <span class="progress-text">${totalGoals} goals</span>
          </div>
        </div>
        
        <div class="monthly-content">
          <div class="focus-area-selection">
            <label class="form-label">Focus Area</label>
            <select class="form-select focus-area-select" data-month="${monthNumber}" ${isPastMonth ? 'disabled' : ''}>
              <option value="">Select focus area</option>
              ${focusAreasData.map(area => `
                <option value="${area.id}" ${assignment && assignment.focus_area_id === area.id ? 'selected' : ''}>
                  ${area.name}
                </option>
              `).join('')}
            </select>
          </div>
          
          <div class="monthly-goals" id="goals-${monthNumber}" style="${assignment ? 'display: block;' : 'display: none;'}">
            <label class="form-label">Monthly Goals</label>
            <div class="goals-list" id="goals-list-${monthNumber}">
              ${renderMonthlyGoals(monthNumber, goals, isPastMonth)}
            </div>
          </div>
        </div>
      </div>
    `;
  }).join('');

  // Add event listeners for focus area selections
  document.querySelectorAll('.focus-area-select').forEach(select => {
    select.addEventListener('change', handleFocusAreaChange);
  });

  // Add event listeners for goal checkboxes
  document.querySelectorAll('.goal-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', handleGoalToggle);
  });
}

function renderMonthlyGoals(monthNumber, goals, isPastMonth) {
  if (goals.length === 0) {
    return '<p class="no-goals-text">No goals assigned to this focus area for this month.</p>';
  }

  return goals.map(goal => `
    <div class="goal-item">
      <label class="goal-label">
        <input 
          type="checkbox" 
          class="goal-checkbox" 
          data-goal-id="${goal.id}"
          data-month="${monthNumber}"
          ${goal.progress >= 100 ? 'checked' : ''}
          ${isPastMonth ? 'disabled' : ''}
        >
        <div class="goal-content">
          <span class="goal-title">${goal.title}</span>
          ${goal.description ? `<span class="goal-description">${goal.description}</span>` : ''}
        </div>
      </label>
    </div>
  `).join('');
}

async function handleYearChange(event) {
  currentYear = parseInt(event.target.value);
  await loadFocusAreasData();
}

async function handleFocusAreaChange(event) {
  const month = parseInt(event.target.dataset.month);
  const focusAreaId = event.target.value;
  
  try {
    if (focusAreaId) {
      // Assign focus area to month
      await API.post('/monthly-focus', {
        year: currentYear,
        month: month,
        focus_area_id: parseInt(focusAreaId)
      });
      
      // Update local state
      const focusArea = focusAreasData.find(area => area.id === parseInt(focusAreaId));
      monthlyAssignments[month] = {
        focus_area_id: parseInt(focusAreaId),
        focus_area_name: focusArea.name
      };
    } else {
      // Remove focus area assignment
      await API.post('/monthly-focus', {
        year: currentYear,
        month: month,
        focus_area_id: null
      });
      
      delete monthlyAssignments[month];
    }

    // Load and display goals for this focus area and month
    await loadGoalsForMonth(month, focusAreaId);
    updateSummaryStats();
    
    Utils.showNotification('Focus area updated successfully', 'success');
  } catch (error) {
    console.error('Error updating focus area:', error);
    Utils.showNotification('Error updating focus area', 'error');
  }
}

async function loadGoalsForMonth(month, focusAreaId) {
  try {
    const goalsContainer = document.getElementById(`goals-${month}`);
    const goalsListContainer = document.getElementById(`goals-list-${month}`);
    
    if (!goalsContainer || !goalsListContainer) return;

    if (focusAreaId) {
      // Load all monthly goals for current year and filter by focus area
      const allGoals = await API.get(`/goals?type=monthly&target_year=${currentYear}`);
      
      // Find the selected focus area
      const selectedFocusArea = focusAreasData.find(area => area.id == focusAreaId);
      
      // Filter goals that match this focus area (by name matching)
      const goals = allGoals.filter(goal => {
        // Match by focus area name or category
        return goal.focus_area_id == focusAreaId || 
               (selectedFocusArea && goal.focus_area_name === selectedFocusArea.name) ||
               (selectedFocusArea && goal.category === selectedFocusArea.category);
      });
      
      // Update local state
      monthlyGoals[month] = goals;
      
      // Show goals container
      goalsContainer.style.display = 'block';
      
      // Render goals
      const currentDate = new Date();
      const currentMonth = currentDate.getMonth() + 1;
      const currentYear = currentDate.getFullYear();
      const isPastMonth = (currentYear === parseInt(document.getElementById('year-select').value)) && month < currentMonth;
      
      goalsListContainer.innerHTML = renderMonthlyGoals(month, goals, isPastMonth);
      
      // Add event listeners for new checkboxes
      goalsListContainer.querySelectorAll('.goal-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', handleGoalToggle);
      });
    } else {
      // Hide goals container
      goalsContainer.style.display = 'none';
      monthlyGoals[month] = [];
    }
  } catch (error) {
    console.error('Error loading goals for month:', error);
    Utils.showNotification('Error loading goals', 'error');
  }
}

async function handleGoalToggle(event) {
  const goalId = parseInt(event.target.dataset.goalId);
  const month = parseInt(event.target.dataset.month);
  const isCompleted = event.target.checked;
  
  try {
    // Update goal progress and month assignment
    await API.put(`/goals/${goalId}`, {
      progress: isCompleted ? 100 : 0,
      target_month: month
    });
    
    // Update local state
    const goals = monthlyGoals[month] || [];
    const goal = goals.find(g => g.id === goalId);
    if (goal) {
      goal.progress = isCompleted ? 100 : 0;
      goal.target_month = month;
    }
    
    // Update progress display for this month
    updateMonthProgress(month);
    updateSummaryStats();
    
    Utils.showNotification(`Goal ${isCompleted ? 'completed' : 'uncompleted'} successfully`, 'success');
  } catch (error) {
    console.error('Error updating goal:', error);
    Utils.showNotification('Error updating goal', 'error');
    // Revert checkbox state
    event.target.checked = !isCompleted;
  }
}

function updateMonthProgress(month) {
  const goals = monthlyGoals[month] || [];
  const completedGoals = goals.filter(goal => goal.progress >= 100).length;
  const totalGoals = goals.length;
  const progressPercentage = totalGoals > 0 ? Math.round((completedGoals / totalGoals) * 100) : 0;
  
  const monthCard = document.querySelector(`[data-month="${month}"]`);
  if (monthCard) {
    const progressElement = monthCard.querySelector('.progress-percentage');
    const progressBar = monthCard.querySelector('.progress-fill');
    const progressText = monthCard.querySelector('.progress-text');
    
    if (progressElement) progressElement.textContent = `${progressPercentage}%`;
    if (progressBar) progressBar.style.width = `${progressPercentage}%`;
    if (progressText) progressText.textContent = `${totalGoals} goals`;
  }
}

function updateSummaryStats() {
  // Update assigned months count
  const assignedMonthsCount = Object.keys(monthlyAssignments).length;
  document.getElementById('assigned-months').textContent = assignedMonthsCount;
  
  // Update total goals assigned count
  const totalGoalsAssigned = Object.values(monthlyGoals).reduce((total, goals) => total + goals.length, 0);
  document.getElementById('goals-assigned').textContent = totalGoalsAssigned;
  
  // Update average progress
  const allGoals = Object.values(monthlyGoals).flat();
  const avgProgress = allGoals.length > 0 
    ? Math.round(allGoals.reduce((total, goal) => total + goal.progress, 0) / allGoals.length)
    : 0;
  document.getElementById('avg-progress').textContent = `${avgProgress}%`;
  
  // Focus areas count is static (from server)
  document.getElementById('total-focus-areas').textContent = focusAreasData.length;
}

// Focus Areas management functions
function renderFocusAreasList() {
  const list = document.getElementById('focus-areas-list');
  const noFocusAreas = document.getElementById('no-focus-areas');

  if (focusAreasData.length === 0) {
    if (list) list.innerHTML = '';
    if (noFocusAreas) noFocusAreas.classList.remove('hidden');
  } else {
    if (noFocusAreas) noFocusAreas.classList.add('hidden');
    
    if (list) {
      list.innerHTML = focusAreasData.map(area => `
        <div class="focus-area-item" id="focus-area-${area.id}">
          <div class="focus-area-display" id="focus-area-display-${area.id}">
            <div class="focus-area-content">
              <h3 class="focus-area-name">${area.name}</h3>
              <p class="focus-area-category">${area.category}</p>
              <div class="focus-area-meta">
                <span class="focus-area-status ${area.is_active ? 'active' : 'inactive'}">
                  ${area.is_active ? 'Active' : 'Inactive'}
                </span>
                <span class="focus-area-date">Created: ${new Date(area.created_at).toLocaleDateString()}</span>
              </div>
            </div>
            <div class="focus-area-actions">
              <button class="btn btn-secondary btn-sm" onclick="editFocusArea(${area.id})">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                  <path d="m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                </svg>
                Edit
              </button>
              <button class="btn btn-danger btn-sm" onclick="deleteFocusArea(${area.id}, '${area.name}')">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2 2 0 0 1-2,2H7a2 2 0 0 1-2-2V6m3,0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                </svg>
                Delete
              </button>
            </div>
          </div>

          <div class="focus-area-edit-form hidden" id="focus-area-edit-${area.id}">
            <form onsubmit="saveFocusArea(event, ${area.id})">
              <div class="form-group mb-4">
                <label class="form-label">Focus Area Name</label>
                <input type="text" name="name" class="form-input" value="${area.name}" required>
              </div>
              
              <div class="form-group mb-4">
                <label class="form-label">Category</label>
                <input type="text" name="category" class="form-input" value="${area.category}" required>
              </div>
              
              <div class="form-group mb-4">
                <label class="form-label">Status</label>
                <select name="is_active" class="form-select">
                  <option value="1" ${area.is_active ? 'selected' : ''}>Active</option>
                  <option value="0" ${!area.is_active ? 'selected' : ''}>Inactive</option>
                </select>
              </div>

              <div class="focus-area-edit-actions">
                <button type="button" class="btn btn-secondary" onclick="cancelEditFocusArea(${area.id})">
                  <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M18 6 6 18M6 6l12 12"/>
                  </svg>
                  Cancel
                </button>
                <button type="submit" class="btn btn-primary">
                  <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>
                    <polyline points="17,21 17,13 7,13 7,21"/>
                    <polyline points="7,3 7,8 15,8"/>
                  </svg>
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </div>
      `).join('');
    }
  }
}

function showFocusAreaForm(focusAreaData = null) {
  const isEdit = !!focusAreaData;
  const title = isEdit ? 'Edit Focus Area' : 'Add New Focus Area';
  const submitText = isEdit ? 'Update Focus Area' : 'Add Focus Area';
  
  // Create modal HTML
  const modalHTML = `
    <div id="focus-area-modal" class="modal">
      <div class="modal-overlay"></div>
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">${title}</h3>
          <button class="modal-close" onclick="closeFocusAreaModal()">
            <svg class="icon-lg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M18 6 6 18M6 6l12 12"/>
            </svg>
          </button>
        </div>
        <form id="focus-area-form" class="modal-body" onsubmit="submitFocusAreaForm(event, ${isEdit ? focusAreaData.id : 'null'})">
          <div class="form-group">
            <label for="focus-area-name" class="form-label">Focus Area Name</label>
            <input type="text" id="focus-area-name" name="name" class="form-input" 
                   value="${isEdit ? focusAreaData.name : ''}" 
                   placeholder="Enter focus area name" required>
          </div>

          <div class="form-group">
            <label for="focus-area-category" class="form-label">Category</label>
            <input type="text" id="focus-area-category" name="category" class="form-input" 
                   value="${isEdit ? focusAreaData.category : ''}" 
                   placeholder="Enter category" required>
          </div>

          <div class="form-group">
            <label for="focus-area-status" class="form-label">Status</label>
            <select id="focus-area-status" name="is_active" class="form-select">
              <option value="1" ${!isEdit || focusAreaData.is_active ? 'selected' : ''}>Active</option>
              <option value="0" ${isEdit && !focusAreaData.is_active ? 'selected' : ''}>Inactive</option>
            </select>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeFocusAreaModal()">
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M18 6 6 18M6 6l12 12"/>
              </svg>
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>
                <polyline points="17,21 17,13 7,13 7,21"/>
                <polyline points="7,3 7,8 15,8"/>
              </svg>
              ${submitText}
            </button>
          </div>
        </form>
      </div>
    </div>
  `;

  // Add modal to page
  document.body.insertAdjacentHTML('beforeend', modalHTML);
}

function closeFocusAreaModal() {
  const modal = document.getElementById('focus-area-modal');
  if (modal) {
    modal.remove();
  }
}

async function submitFocusAreaForm(e, focusAreaId) {
  e.preventDefault();
  
  try {
    const form = e.target;
    const formData = new FormData(form);
    
    const focusAreaData = {
      name: formData.get('name'),
      category: formData.get('category'),
      is_active: parseInt(formData.get('is_active'))
    };

    if (focusAreaId) {
      // Update existing focus area
      await API.put(`/focus-areas/${focusAreaId}`, focusAreaData);
      Utils.showNotification('Focus area updated successfully!', 'success');
    } else {
      // Create new focus area
      await API.post('/focus-areas', focusAreaData);
      Utils.showNotification('Focus area created successfully!', 'success');
    }
    
    closeFocusAreaModal();
    
    // Reload focus areas data and refresh both tabs
    await loadFocusAreasData();
    
  } catch (error) {
    console.error('Error saving focus area:', error);
    Utils.showNotification('Error saving focus area', 'error');
  }
}

function editFocusArea(focusAreaId) {
  const displayDiv = document.getElementById(`focus-area-display-${focusAreaId}`);
  const editDiv = document.getElementById(`focus-area-edit-${focusAreaId}`);
  
  if (displayDiv && editDiv) {
    displayDiv.classList.add('hidden');
    editDiv.classList.remove('hidden');
  }
}

function cancelEditFocusArea(focusAreaId) {
  const displayDiv = document.getElementById(`focus-area-display-${focusAreaId}`);
  const editDiv = document.getElementById(`focus-area-edit-${focusAreaId}`);
  
  if (displayDiv && editDiv) {
    displayDiv.classList.remove('hidden');
    editDiv.classList.add('hidden');
  }
}

async function saveFocusArea(e, focusAreaId) {
  e.preventDefault();
  
  try {
    const form = e.target;
    const formData = new FormData(form);
    
    const focusAreaData = {
      name: formData.get('name'),
      category: formData.get('category'),
      is_active: parseInt(formData.get('is_active'))
    };

    await API.put(`/focus-areas/${focusAreaId}`, focusAreaData);
    
    // Return to display view and refresh data
    cancelEditFocusArea(focusAreaId);
    await loadFocusAreasData();
    
    Utils.showNotification('Focus area updated successfully!', 'success');
    
  } catch (error) {
    console.error('Error updating focus area:', error);
    Utils.showNotification('Error updating focus area', 'error');
  }
}

async function deleteFocusArea(focusAreaId, focusAreaName) {
  if (!confirm(`Are you sure you want to delete the focus area "${focusAreaName}"? This action cannot be undone.`)) {
    return;
  }
  
  try {
    await API.delete(`/focus-areas/${focusAreaId}`);
    
    // Reload focus areas data and refresh both tabs
    await loadFocusAreasData();
    
    Utils.showNotification('Focus area deleted successfully!', 'success');
    
  } catch (error) {
    console.error('Error deleting focus area:', error);
    Utils.showNotification('Error deleting focus area', 'error');
  }
}
</script>